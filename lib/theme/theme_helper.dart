import 'package:tpay/export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.onPrimary.withOpacity(0.06),
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray300,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 40.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 32.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 24.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: 10.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 8.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 20.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF1D3A6F),
    primaryContainer: Color(0XFFFBBB00),
    secondary: Color(0XFFFBBB00),
    secondaryContainer: Color(0XFFF50100),
    tertiary: Color(0XFFFBBB00),
    tertiaryContainer: Color(0XFFF50100),

    // Background colors
    background: Color(0XFFFBBB00),

    // Surface colors
    surface: Color(0XFFFBBB00),
    surfaceTint: Color(0X99FFFFFF),
    surfaceVariant: Color(0XFFF50100),

    // Error colors
    error: Color(0X99FFFFFF),
    errorContainer: Color(0XFF505050),
    onError: Color(0XFF262C2D),
    onErrorContainer: Color(0XFF02053C),

    // On colors(text colors)
    onBackground: Color(0X871D2634),
    onInverseSurface: Color(0XFF262C2D),
    onPrimary: Color(0X99FFFFFF),
    onPrimaryContainer: Color(0X871D2634),
    onSecondary: Color(0X871D2634),
    onSecondaryContainer: Color(0X99FFFFFF),
    onTertiary: Color(0X871D2634),
    onTertiaryContainer: Color(0X99FFFFFF),

    // Other colors
    outline: Color(0X99FFFFFF),
    outlineVariant: Color(0XFFFBBB00),
    scrim: Color(0XFFFBBB00),
    shadow: Color(0X99FFFFFF),

    // Inverse colors
    inversePrimary: Color(0XFFFBBB00),
    inverseSurface: Color(0X99FFFFFF),

    // Pending colors
    onSurface: Color(0X871D2634),
    onSurfaceVariant: Color(0X99FFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => const Color(0XFFFACC15);

  // Black
  Color get black900 => const Color(0XFF000000);

  // Blue
  Color get blue300 => const Color(0XFF5FA8EE);

  // BlueGray
  Color get blueGray10014 => const Color(0X14D1D5DB);
  Color get blueGray200 => const Color(0XFF9FD5C7);
  Color get blueGray300 => const Color(0XFF9CA3AF);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray40014 => const Color(0X14718096);
  Color get blueGray800 => const Color(0XFF374151);
  Color get blueGray80001 => const Color(0XFF3F3D56);
  Color get blueGray900 => const Color(0XFF252836);

  // BlueGraya
  Color get blueGray3000a => const Color(0X0A9BA3AF);

  // Cyan
  Color get cyan90026 => const Color(0X26096375);

  // DeepOrange
  Color get deepOrange100 => const Color(0XFFFFB9AA);

  // DeepPurple
  Color get deepPurpleA100 => const Color(0XFFAB92F0);
  Color get deepPurpleA200 => const Color(0XFF7B61FF);

  // Gray
  Color get gray100 => const Color(0XFFF3F4F6);
  Color get gray10001 => const Color(0XFFF2F2F2);
  Color get gray200 => const Color(0XFFE5E7EB);
  Color get gray20001 => const Color(0XFFEEEEEE);
  Color get gray50 => const Color(0XFFF7FCFF);
  Color get gray500 => const Color(0XFF9796A1);
  Color get gray5001 => const Color(0XFFF7FBFF);
  Color get gray5002 => const Color(0XFFF9FAFB);
  Color get gray5003 => const Color(0XFFF0FCFF);
  Color get gray600 => const Color(0XFF6B7280);
  Color get gray60033 => const Color(0X336B727F);
  Color get gray800 => const Color(0XFF3A4245);
  Color get gray900 => const Color(0XFF111827);
  Color get gray90001 => const Color(0XFF272727);
  Color get gray90002 => const Color(0XFF121515);
  Color get gray90003 => const Color(0XFF0F172A);
  Color get gray90023 => const Color(0X23001540);

  // Green
  Color get green400 => const Color(0XFF4ADE80);

  // Indigo
  Color get indigo800 => const Color(0XFF253B80);
  Color get indigo900 => const Color(0XFF203C71);
  Color get indigo90001 => const Color(0XFF1D3A70);

  // Lime
  Color get lime800 => const Color(0XFF9F7D3B);
  Color get limeA200 => const Color(0XFFE6FE4E);

  // Orange
  Color get orangeA200 => const Color(0XFFFB923C);

  // Red
  Color get red50 => const Color(0XFFFFF1EE);
  Color get red500 => const Color(0XFFF14336);
  Color get red700 => const Color(0XFFE31D1C);

  // Teal
  Color get teal300 => const Color(0XFF55BBC5);
  Color get teal400 => const Color(0XFF1DAB87);
  Color get teal40000 => const Color(0X002EA2B9);

  // Yellow
  Color get yellow800 => const Color(0XFFF79E1B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
